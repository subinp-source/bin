/*
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 */
package de.hybris.platform.cmsfacades.mediacontainers.impl;

import static org.hamcrest.CoreMatchers.containsString;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.greaterThanOrEqualTo;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.collection.IsMapContaining.hasEntry;
import static org.junit.Assert.assertThat;
import static org.mockito.Matchers.anyString;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import de.hybris.bootstrap.annotations.UnitTest;
import de.hybris.platform.catalog.model.CatalogVersionModel;
import de.hybris.platform.cms2.data.PageableData;
import de.hybris.platform.cms2.exceptions.CMSItemNotFoundException;
import de.hybris.platform.cms2.servicelayer.services.admin.CMSAdminSiteService;
import de.hybris.platform.cmsfacades.data.ItemData;
import de.hybris.platform.cmsfacades.data.MediaContainerData;
import de.hybris.platform.cmsfacades.media.service.CMSMediaContainerService;
import de.hybris.platform.cmsfacades.uniqueidentifier.UniqueItemIdentifierService;
import de.hybris.platform.core.model.media.MediaContainerModel;
import de.hybris.platform.core.model.media.MediaFormatModel;
import de.hybris.platform.core.model.media.MediaModel;
import de.hybris.platform.servicelayer.exceptions.UnknownIdentifierException;
import de.hybris.platform.servicelayer.keygenerator.impl.PersistentKeyGenerator;
import de.hybris.platform.servicelayer.search.SearchResult;
import de.hybris.platform.servicelayer.search.impl.SearchResultImpl;
import de.hybris.platform.servicelayer.security.permissions.PermissionCRUDService;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.runners.MockitoJUnitRunner;


@UnitTest
@RunWith(MockitoJUnitRunner.class)
public class DefaultMediaContainerFacadeTest
{
	private static final String UUID_POSTFIX = "-uuid";
	private static final String CATALOG_VERSION_UUID = "cv-uuid";
	private static final String MEDIA_CONTAINER_UUID = "mc-uuid";
	private static final String TEST_VALID_ID = "my-container-id";
	private static final String TEST_INVALID_ID = "my-container-id";

	private static final String DESKTOP_FORMAT = "desktop";
	private static final String TABLET_FORMAT = "tablet";
	private static final String WIDESCREEN_FORMAT = "widescreen";

	private final List<String> cmsRequiredMediaFormatQualifiers = Arrays.asList(WIDESCREEN_FORMAT);

	@Mock
	private PersistentKeyGenerator mediaQualifierIdGenerator;
	@Mock
	private CMSMediaContainerService cmsMediaContainerService;
	@Mock
	private CMSAdminSiteService cmsAdminSiteService;
	@Mock
	private PermissionCRUDService permissionCRUDService;
	@Mock
	private UniqueItemIdentifierService uniqueItemIdentifierService;

	@InjectMocks
	private DefaultMediaContainerFacade mediaContainerFacade;

	@Mock
	private CatalogVersionModel catalogVersion;

	private MediaContainerModel mediaContainer;

	@Before
	public void setUp()
	{
		doReturn(true).when(permissionCRUDService).canCreateTypeInstance(anyString());
		doReturn(true).when(permissionCRUDService).canReadType(anyString());

		doReturn(catalogVersion).when(cmsAdminSiteService).getActiveCatalogVersion();
		doThrow(new UnknownIdentifierException("Invalid ID")).when(cmsMediaContainerService)
				.getMediaContainerForQualifier(TEST_INVALID_ID, catalogVersion);

		final ItemData catalogVersionItemData = new ItemData();
		catalogVersionItemData.setItemId(CATALOG_VERSION_UUID);
		doReturn(Optional.of(catalogVersionItemData)).when(uniqueItemIdentifierService).getItemData(catalogVersion);

		mediaContainer = new MediaContainerModel();
		mediaContainer.setQualifier(TEST_VALID_ID);
		mediaContainer.setCatalogVersion(catalogVersion);
		mediaContainer.setMedias(Collections.emptyList());

		final ItemData mediaContainerItemData = new ItemData();
		mediaContainerItemData.setItemId(MEDIA_CONTAINER_UUID);
		doReturn(Optional.of(mediaContainerItemData)).when(uniqueItemIdentifierService).getItemData(mediaContainer);

		mediaContainerFacade.setCmsRequiredMediaFormatQualifiers(cmsRequiredMediaFormatQualifiers);
	}

	@Test
	public void shouldCreateMediaContainerWithQualifier()
	{
		final MediaContainerModel model = mediaContainerFacade.createMediaContainer(TEST_VALID_ID);

		assertThat(model.getQualifier(), equalTo(TEST_VALID_ID));
	}

	@Test
	public void shouldCreateMediaContainerWithAutoGeneratedQualifier()
	{
		final MediaContainerModel model = mediaContainerFacade.createMediaContainer();

		verify(mediaQualifierIdGenerator).generate();
		assertThat(model.getQualifier(), containsString(DefaultMediaContainerFacade.MEDIA_CONTAINER_QUALIFIER));
	}

	@Test
	public void shouldGetMediaContainerForQualifier() throws CMSItemNotFoundException
	{
		doReturn(mediaContainer).when(cmsMediaContainerService).getMediaContainerForQualifier(TEST_VALID_ID, catalogVersion);

		final MediaContainerData data = mediaContainerFacade.getMediaContainerForQualifier(TEST_VALID_ID);

		assertThat(data.getQualifier(), equalTo(TEST_VALID_ID));
		assertThat(data.getCatalogVersion(), equalTo(CATALOG_VERSION_UUID));
		assertThat(data.getMediaContainerUuid(), equalTo(MEDIA_CONTAINER_UUID));
	}

	@Test(expected = CMSItemNotFoundException.class)
	public void shouldFailGetMediaContainerForInvalidQualifier() throws CMSItemNotFoundException
	{
		mediaContainerFacade.getMediaContainerForQualifier(TEST_INVALID_ID);
	}

	@Test
	public void shouldFindMediaContainers()
	{
		final PageableData pageableData = new PageableData();
		pageableData.setCurrentPage(0);
		pageableData.setPageSize(5);

		final SearchResultImpl<MediaContainerModel> mockResult = new SearchResultImpl<>(Arrays.asList(mediaContainer), 1, 1, 0);
		doReturn(mockResult).when(cmsMediaContainerService).findMediaContainersForCatalogVersion("my-container", catalogVersion,
				pageableData);

		final SearchResult<MediaContainerData> searchResult = mediaContainerFacade.findMediaContainers("my-container",
				pageableData);

		assertThat(searchResult.getCount(), greaterThanOrEqualTo(1));

		final MediaContainerData data = searchResult.getResult().iterator().next();
		assertThat(data.getQualifier(), equalTo(TEST_VALID_ID));
		assertThat(data.getCatalogVersion(), equalTo(CATALOG_VERSION_UUID));
		assertThat(data.getMediaContainerUuid(), equalTo(MEDIA_CONTAINER_UUID));
	}

	@Test
	public void shouldGetMediaForRequiredFormat()
	{
		final MediaModel desktopMedia = createMockMedia(DESKTOP_FORMAT);
		final MediaModel tabletMedia = createMockMedia(TABLET_FORMAT);
		final MediaModel widescreenMedia = createMockMedia(WIDESCREEN_FORMAT);
		final List<MediaModel> medias = Arrays.asList(widescreenMedia, tabletMedia, desktopMedia);

		final String result = mediaContainerFacade.getMediaForRequiredFormat(medias);

		assertThat(result, equalTo(widescreenMedia.getURL()));
	}

	@Test
	public void shouldGetNoMediaForRequiredFormat()
	{
		final MediaModel desktopMedia = createMockMedia(DESKTOP_FORMAT);
		final MediaModel tabletMedia = createMockMedia(TABLET_FORMAT);
		final List<MediaModel> medias = Arrays.asList(tabletMedia, desktopMedia);

		final String result = mediaContainerFacade.getMediaForRequiredFormat(medias);

		assertThat(result, nullValue());
	}

	@Test
	public void shouldGetFirstMediaFoundForRequiredFormat()
	{
		final MediaModel desktopMedia = createMockMedia(DESKTOP_FORMAT);
		final MediaModel tabletMedia = createMockMedia(TABLET_FORMAT);
		final List<MediaModel> medias = Arrays.asList(tabletMedia, desktopMedia);
		mediaContainerFacade.setCmsRequiredMediaFormatQualifiers(Collections.emptyList());

		final String result = mediaContainerFacade.getMediaForRequiredFormat(medias);

		assertThat(result, equalTo(tabletMedia.getURL()));
	}

	@Test
	public void shouldConvertMediaContainerModelToData()
	{
		final MediaModel desktopMedia = createMockMedia(DESKTOP_FORMAT);
		final MediaModel tabletMedia = createMockMedia(TABLET_FORMAT);
		final MediaModel widescreenMedia = createMockMedia(WIDESCREEN_FORMAT);
		mediaContainer.setMedias(Arrays.asList(desktopMedia, tabletMedia, widescreenMedia));

		createMockItemDataForMedia(desktopMedia);
		createMockItemDataForMedia(tabletMedia);
		createMockItemDataForMedia(widescreenMedia);

		final MediaContainerData data = mediaContainerFacade.converModelToData(mediaContainer);

		assertThat(data.getCatalogVersion(), equalTo(CATALOG_VERSION_UUID));
		assertThat(data.getFormatMediaCodeMap(), hasEntry(DESKTOP_FORMAT, desktopMedia.getCode() + UUID_POSTFIX));
		assertThat(data.getFormatMediaCodeMap(), hasEntry(TABLET_FORMAT, tabletMedia.getCode() + UUID_POSTFIX));
		assertThat(data.getFormatMediaCodeMap(), hasEntry(WIDESCREEN_FORMAT, widescreenMedia.getCode() + UUID_POSTFIX));
		assertThat(data.getMediaContainerUuid(), equalTo(MEDIA_CONTAINER_UUID));
		assertThat(data.getQualifier(), equalTo(TEST_VALID_ID));
		assertThat(data.getThumbnailUrl(), equalTo(widescreenMedia.getURL()));

	}

	protected MediaModel createMockMedia(final String code)
	{
		final MediaModel media = Mockito.mock(MediaModel.class);
		when(media.getCode()).thenReturn(code);
		when(media.getURL()).thenReturn("/path/to/image/" + code + ".png");
		when(media.getCatalogVersion()).thenReturn(catalogVersion);

		final MediaFormatModel format = Mockito.mock(MediaFormatModel.class);
		when(format.getQualifier()).thenReturn(code);
		when(media.getMediaFormat()).thenReturn(format);

		return media;
	}

	protected void createMockItemDataForMedia(final MediaModel media)
	{
		final ItemData itemData = new ItemData();
		itemData.setItemId(media.getCode() + UUID_POSTFIX);
		doReturn(Optional.of(itemData)).when(uniqueItemIdentifierService).getItemData(media);
	}
}
