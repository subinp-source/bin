<?xml version="1.0" encoding="UTF-8"?>
<!--
 Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
-->
<!-- 
  WARNING: This is the Spring WEB configuration file. If you want to replace
  items or managers you have to do this from the extensions core configuration 
  file (cmssmartedit/resources/cmssmartedit-spring.xml)
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
    xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop.xsd
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/mvc
           http://www.springframework.org/schema/mvc/spring-mvc.xsd
           http://www.springframework.org/schema/util
           http://www.springframework.org/schema/util/spring-util.xsd">

	<!-- spring security file -->
	<import resource="config/security-spring.xml"/>
	
	<!-- Scan for annotation configured controller -->
	<context:component-scan base-package="de.hybris.cmssmartedit"/>

	<mvc:resources mapping="/**" location="/">
		<!--
			Caching enabled for static resources. Files will be cached for an hour. After that,
			the browser will "ask" if there's newer content. If newer content is available it will
			be returned. Otherwise, the server will reply with a 304 status code.
		-->
		<mvc:cache-control max-age="3600" must-revalidate="true" />
	</mvc:resources>

    <!-- activates annotation driven binding -->
	<bean id="pathMatcher" class="org.springframework.util.AntPathMatcher"/>
	<bean id="urlPathHelper" class="org.springframework.web.util.UrlPathHelper"/>

	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">
		<property name="order" value="0"/>
		<property name="pathMatcher" ref="pathMatcher"/>
		<property name="urlPathHelper" ref="urlPathHelper"/>
	</bean>
	
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="webBindingInitializer">
			<bean class="org.springframework.web.bind.support.ConfigurableWebBindingInitializer" />
		</property>
		<property name="messageConverters">
			<list>
				<bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter"/>
				<bean class="org.springframework.http.converter.StringHttpMessageConverter">
					<property name="writeAcceptCharset" value="false"/>
				</bean>
				<bean class="org.springframework.http.converter.ResourceHttpMessageConverter"/>
				<bean class="org.springframework.http.converter.xml.SourceHttpMessageConverter"/>
				<bean class="org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter"/>
				<bean class="org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter"/>
				<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" >
				</bean>
			</list>
		</property>
	</bean>
	
	
	<!-- 
	 Registering the hybris "tenant" scope 
	 This is the custom hybris scope that manages the lifetime of a "tenant". 
	 If you do not deal with tenants ("multimandantenf??higkeit"), then there 
	 is no need to understand what this is for.  
	 -->
	<bean class="org.springframework.beans.factory.config.CustomScopeConfigurer">
        <property name="scopes">
            <map>
                <entry key="tenant" value="de.hybris.platform.spring.TenantScope"/>
            </map>
        </property>
    </bean>
    
	<!-- Spring managed FilterChain for hybris Filter stack -->
	<bean id="cmssmarteditPlatformFilterChain" class="de.hybris.platform.servicelayer.web.PlatformFilterChain">
		<constructor-arg>
			<list>
				<ref bean="log4jFilter"/>
				<ref bean="dynamicTenantActivationFilter"/>
				<ref bean="sessionFilter"/>
				<ref bean="springSecurityFilterChain" />
                <ref bean="cmssmarteditMediaFilter" />
			</list>
		</constructor-arg>
	</bean>
	
	<bean id="cmssmarteditMediaFilter" class="de.hybris.platform.servicelayer.web.WebAppMediaFilter">
		<property name="mediaPermissionService" ref="mediaPermissionService"/>
		<property name="modelService" ref="modelService"/>
		<property name="userService" ref="userService"/>
		<property name="mediaService" ref="mediaService"/>
	</bean>
	
</beans>
