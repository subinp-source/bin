<?xml version="1.0" encoding="UTF-8"?>
<!--
 Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
-->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:security="http://www.springframework.org/schema/security" xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
		xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/security/oauth2
		http://www.springframework.org/schema/security/spring-security-oauth2.xsd">

	<beans>

		<http pattern="/v1/customersegmentations/**" entry-point-ref="oauthAuthenticationEntryPoint" use-expressions="true" xmlns="http://www.springframework.org/schema/security">
			<session-management session-authentication-strategy-ref="fixation" />

			<intercept-url pattern="/**" method="OPTIONS" access="permitAll"/>
			<intercept-url pattern="/**" access="hasRole('ROLE_CXMANAGERGROUP') or hasRole('ROLE_ADMINGROUP')" requires-channel="#{configurationService.configuration.getString('webservicescommons.required.channel', 'https')}" />

			<port-mappings>
				<port-mapping http="#{configurationService.configuration.getProperty('tomcat.http.port')}" https="#{configurationService.configuration.getProperty('tomcat.ssl.port')}" />
				<port-mapping http="#{configurationService.configuration.getProperty('embeddedserver.http.port')}" https="#{configurationService.configuration.getProperty('embeddedserver.ssl.port')}" />
			</port-mappings>

			<custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
			<custom-filter ref="hybrisUserFilter" after="LAST" />
			<access-denied-handler ref="oauthAccessDeniedHandler" />

			<headers>
				<content-type-options />
				<hsts include-subdomains="true" max-age-seconds="16070400" />
				<xss-protection />
				<security:frame-options disabled="true"/>
			</headers>
			<security:csrf disabled="true"/>
		</http>

		<http pattern="/v1/segments/**" entry-point-ref="oauthAuthenticationEntryPoint" use-expressions="true" xmlns="http://www.springframework.org/schema/security">
			<session-management session-authentication-strategy-ref="fixation" />

			<intercept-url pattern="/**" method="OPTIONS" access="permitAll"/>
			<intercept-url pattern="/v1/segments" method="GET" access="@oauthSecurityChecker.hasScope(authentication,'personalizationwebservices') and (hasRole('ROLE_CXREADONLYGROUP') or hasRole('ROLE_CXMANAGERGROUP') or hasRole('ROLE_ADMINGROUP'))" requires-channel="#{configurationService.configuration.getString('webservicescommons.required.channel', 'https')}" />
			<intercept-url pattern="/v1/segments/**" method="GET" access="@oauthSecurityChecker.hasScope(authentication,'personalizationwebservices') and (hasRole('ROLE_CXREADONLYGROUP') or hasRole('ROLE_CXMANAGERGROUP') or hasRole('ROLE_ADMINGROUP'))" requires-channel="#{configurationService.configuration.getString('webservicescommons.required.channel', 'https')}" />
			<intercept-url pattern="/v1/segments" method="POST" access="hasRole('ROLE_CXMANAGERGROUP') or hasRole('ROLE_ADMINGROUP')" requires-channel="#{configurationService.configuration.getString('webservicescommons.required.channel', 'https')}" />
			<intercept-url pattern="/v1/segments/**" method="PUT" access="hasRole('ROLE_CXMANAGERGROUP') or hasRole('ROLE_ADMINGROUP')" requires-channel="#{configurationService.configuration.getString('webservicescommons.required.channel', 'https')}" />
			<intercept-url pattern="/v1/segments/**" method="DELETE" access="hasRole('ROLE_CXMANAGERGROUP') or hasRole('ROLE_ADMINGROUP')" requires-channel="#{configurationService.configuration.getString('webservicescommons.required.channel', 'https')}" />

			<port-mappings>
				<port-mapping http="#{configurationService.configuration.getProperty('tomcat.http.port')}" https="#{configurationService.configuration.getProperty('tomcat.ssl.port')}" />
				<port-mapping http="#{configurationService.configuration.getProperty('embeddedserver.http.port')}" https="#{configurationService.configuration.getProperty('embeddedserver.ssl.port')}" />
			</port-mappings>

			<custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
			<custom-filter ref="hybrisUserFilter" after="LAST" />
			<access-denied-handler ref="oauthAccessDeniedHandler" />

			<headers>
				<content-type-options />
				<hsts include-subdomains="true" max-age-seconds="16070400" />
				<xss-protection />
				<security:frame-options disabled="true"/>
			</headers>
			<security:csrf disabled="true"/>
		</http>

		<import resource="security-spring.xml"/>

	</beans>

</beans>
