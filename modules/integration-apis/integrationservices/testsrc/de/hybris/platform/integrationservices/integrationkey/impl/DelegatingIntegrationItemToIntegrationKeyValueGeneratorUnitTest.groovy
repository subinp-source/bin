/*
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 */
package de.hybris.platform.integrationservices.integrationkey.impl

import de.hybris.bootstrap.annotations.UnitTest
import de.hybris.platform.integrationservices.integrationkey.IntegrationKeyValueGenerator
import de.hybris.platform.integrationservices.item.IntegrationItem
import de.hybris.platform.integrationservices.model.TypeDescriptor
import de.hybris.platform.integrationservices.search.IntegrationItemToMapConverter
import org.junit.Test
import spock.lang.Specification
import spock.lang.Unroll

@UnitTest
class DelegatingIntegrationItemToIntegrationKeyValueGeneratorUnitTest extends Specification {
    def mapToIntegrationKeyGenerator = Stub IntegrationKeyValueGenerator
    def integrationItemToMapConverter = Stub IntegrationItemToMapConverter
    def integrationItem = Stub(IntegrationItem)

    def integrationKeyValueGenerator = new DelegatingIntegrationItemToIntegrationKeyValueGenerator(
            mapToIntegrationKeyGenerator: mapToIntegrationKeyGenerator,
            integrationItemToMapConverter: integrationItemToMapConverter
    )

    @Test
    @Unroll
    def "key generated by the mapToIntegrationKeyGenerator is returned when integrationItem generates map #mapValue"() {
        given:
        def integrationKey = "keyReturnedFromMapKeyGenerator"
        integrationItemToMapConverter.convert(integrationItem) >> mapValue
        mapToIntegrationKeyGenerator.generate(typeDescriptor, mapValue) >> integrationKey

        expect:
        integrationKeyValueGenerator.generate(typeDescriptor, integrationItem) == integrationKey

        where:
        mapValue  | typeDescriptor
        Stub(Map) | Stub(TypeDescriptor)
        null      | null
    }
}
