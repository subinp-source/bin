<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
 Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
--><!--
 All hybris buildcallbacks.xml macrodefinitions:
 
 Build/Documentation
 
	 before/after ant macro "clean"
		 <macrodef name="commercewebservicestests_before_clean"/>
		 <macrodef name="commercewebservicestests_after_clean"/>
	 
	 before/after ant macro "build"
		 <macrodef name="commercewebservicestests_before_build"/>
		 <macrodef name="commercewebservicestests_after_build"/>
		 
	 before/after ant macro "compile_core" - the core module of the extension
		 <macrodef name="commercewebservicestests_before_compile_core">
		 <macrodef name="commercewebservicestests_after_compile_core">
	 
	 before/after ant macro "compile_web" - the web module of the extension
		 <macrodef name="commercewebservicestests_before_compile_web" />
		 <macrodef name="commercewebservicestests_after_compile_web" />
 
 Preparing extension
 
	 will be called in the beginning of the ant call and only once (also when using multiple 
	 ant targets e.g. ant build yunittest)	
		 <macrodef name="commercewebservicestests_only_once_prepare"/>
 
 Creating ear module/production
 
	 before/after ant macro "ear"
		 <macrodef name="commercewebservicestests_before_ear"/>
		 <macrodef name="commercewebservicestests_after_ear"/>

	 before/after ant macro "production" - for hybris server only
		 <macrodef name="commercewebservicestests_before_production" />
		 <macrodef name="commercewebservicestests_after_production" />
 
 JUnit Test
 
	 before/after ant macro "yunitinit" 
		 <macrodef name="commercewebservicestests_before_yunitinit" />
		 <macrodef name="commercewebservicestests_after_yunitinit" />
	 
	 before/after ant macro "yunit"
		 <macrodef name="commercewebservicestests_before_yunit" />
		 <macrodef name="commercewebservicestests_after_yunit" /> 
		 
 Distribution package
 
 	 before/after ant macro "dist" - internal target; only for use when platform is available in source code
		 <macrodef name="commercewebservicestests_after_dist"/>
		 <macrodef name="commercewebservicestests_before_dist"/>
	 
	 before/after ant macro "dist_copy" - internal target; only for use when platform is available in source code
		 <macrodef name="commercewebservicestests_before_dist_copy"/>
		 <macrodef name="commercewebservicestests_after_dist_copy"/>
		  
 	 With these filters you can override the default extension filters defined in platform/resources/ant/dist/filtersets.xml
 	  	 <patternset id="extension.commercewebservicestests.binary.filter">
 	  	  	 <patternset refid="extension.filter" />
 	  	  	 <exclude name="**/*-source.jar" />
 	  	 </patternset>
 	  	 <patternset id="extension.commercewebservicestests.source.filter">
 	  	  	 <exclude name="**/bin/**" />
 	  	 </patternset>
 
--><project name="commercewebservicestests_buildcallbacks">
    	
    <!-- 
	    Called whenever 'ant ear' is used. this callback can be used to modify the content of the ear file
	
	     ${ear.path}: 			path to ear
	 -->
    	
    <macrodef name="commercewebservicestests_before_ear">
        		
        <sequential>
            			
            <!-- you can do anything before the EAR file is being packed -->
            		
        </sequential>
        	
    </macrodef>
    	
	
    <!-- Imports ws test data for all occaddontest extensions -->
    	
    <macrodef name="importaddonswstestdata">
                
        <sequential>
                    		
            <echo/>
            			
            <!-- for each extension in platform -->
            			
            <foreachext>
                				
                <do>
                    					
                    <if>
                        						
                        <isset property="ext.@{extname}.extension.requires-extension.name"/>
                        						
                        <then>
                            							
                            <!-- for each required extension -->
                            							
                            <for list="${ext.@{extname}.extension.requires-extension.name}" param="required.extname">
                                								
                                <sequential>
                                    									
                                    <if>
                                        										
                                        <!-- check if it depends on commercewebservicestests -->
                                        										
                                        <equals arg1="@{required.extname}" arg2="commercewebservicestests"/>
                                        										
                                        <then>
                                            											
                                            <echo message="Importing ws test data for extension: @{extname}"/>
                                            											
                                            <callback extname="@{extname}" target="importwstestdata"/>
                                            										
                                        </then>
                                        									
                                    </if>
                                    								
                                </sequential>
                                							
                            </for>
                            						
                        </then>
                        					
                    </if>
                    				
                </do>
                			
            </foreachext>
                    
        </sequential>
            
    </macrodef>
    	
    <target name="importwstestdata">
                
        <yrun>
			de.hybris.platform.commercewebservicestests.setup.TestSetupUtils.loadDataInJunit();
        		de.hybris.platform.util.RedeployUtilities.shutdown();
        </yrun>
        		
        <importaddonswstestdata/>
        	
    </target>
    
</project>
