/*
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
package com.hybris.yprofile.consent.services;

import de.hybris.platform.core.model.user.UserModel;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * ConsentService interface. Service is responsible to generate and provide the consent reference.
 */
public interface ConsentService {


    /**
     * Checks if the user (logged In or Anonymous) has granted the consent to allow profile tracking
     *
     * @param request the http request
     * @return true or false
     */
    boolean isProfileTrackingConsentGiven(final HttpServletRequest request);

    /**
     * Saves the profile consent separately in a cookie and session attribute
     * @param request http request
     * @param response http reponse
     * @param consent true or false
     */
    void setProfileConsentCookieAndSession(final HttpServletRequest request, final HttpServletResponse response, final boolean consent);

    void setProfileConsent(final boolean consent);

    /**
     * It gets the consent reference stored in a cookie (generated by ProfileTag)
     * and saves it in the session and in the user model (for logged In users) for further events
     * @param request Http request
     */
    void saveConsentReferenceInSessionAndCurrentUserModel(final HttpServletRequest request);

    /**
     * Fetches the consent reference from cookie
     * @param siteId base site identifier
     * @param request http request
     * @return consent reference
     */
    String getConsentReferenceFromCookie(final String siteId, final HttpServletRequest request);


    /**
     * Fetches the consent reference from header name specified in
     * the property profileservices.occ.consent.header.name
     *
     * @param request http request
     * @return consent reference
     */
    String getConsentReferenceFromHeader(final HttpServletRequest request);

    /**
     * Fetches the consent reference from session
     * @return consent reference
     */
    String getConsentReferenceFromSession();

    /**
     * Deletes the consent reference when the user revokes the consent for profile or user closes the account
     * @param userModel the user
     * @param baseSiteId the base site id
     */
    void deleteConsentReferenceInConsentServiceAndInUserModel(final UserModel userModel, final String baseSiteId);

    /**
     * removes the consent reference in session
     * @param response http response
     */
    void removeConsentReferenceInSession(final HttpServletResponse response);
    
    /**
     * It gets the consent reference stored in a cookie and saves it in the session
     * for further events
     * 
     * @param consentId the consent reference
     */
    void saveConsentReferenceInSession(final String consentId);


    /**
     * Checks if the user (logged in or anonymous) has granted the consent to allow profile tracking
     * 
     * @return true if consent is given
     */
    boolean isProfileTrackingConsentGiven();

    /**
     * Saves the profile id i.e old consent reference separately as a session cookie so that profile tag can skip getting a new consent reference.
     *
     * @param request http request
     * @param response http response to which the cookie is added if the request doesnt have CR cookie
     * @param consentReferenceId the profile id or consent reference id of the user
     */
    void setProfileIdCookie(final HttpServletRequest request, final HttpServletResponse response, final String consentReferenceId);

}
